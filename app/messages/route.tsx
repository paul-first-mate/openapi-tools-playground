import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";
import { toolDefs, toolFns } from "./tools";
import {
  ResponseInput,
  ResponseOutputMessage,
  ResponseOutputText,
} from "openai/resources/responses/responses.mjs";

const openai = new OpenAI();

const tools = [toolDefs.getDailyTransactions];

export async function POST(req: NextRequest) {
  const { message } = await req.json();

  if (!message || typeof message !== "string") {
    return NextResponse.json(
      { error: "Message is required and must be a string." },
      { status: 400 }
    );
  }

  try {
    const inputs: ResponseInput = [
      {
        role: "user",
        content: message,
      },
    ];

    let response = await openai.responses.create({
      model: "gpt-4o-mini",
      tools,
      input: inputs,
    });

    for (const item of response.output) {
      if (item.type == "function_call") {
        if (item.name == "get_daily_transactions") {
          const args = JSON.parse(item.arguments);
          const dailyTransactions = toolFns.getDailyTransactions(args.date);

          inputs.push(item);
          inputs.push({
            type: "function_call_output",
            call_id: item.call_id,
            output: JSON.stringify(dailyTransactions),
          });
        }
      }
    }

    response = await openai.responses.create({
      model: "gpt-4o-mini",
      instructions:
        "Respond only with a transactions generated by a tool. Make it a single line without any fancy formatting.",
      tools,
      input: inputs,
    });

    if (response.output.length === 0) {
      return NextResponse.json(
        { error: "No response from OpenAI." },
        { status: 500 }
      );
    }

    // Don't mind me, just making ts happy
    return NextResponse.json({
      message: (
        (response.output[0] as ResponseOutputMessage)
          .content[0] as ResponseOutputText
      ).text,
    });
  } catch (error) {
    console.error("Error processing message:", error);
    return NextResponse.json(
      { error: "Error processing message." },
      { status: 500 }
    );
  }
}
