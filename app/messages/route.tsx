import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";
import { toolDefs, toolFns } from "./tools";
import { ResponseInput } from "openai/resources/responses/responses.mjs";

const openai = new OpenAI();

const tools = [toolDefs.getDailyTransactions];

export async function POST(req: NextRequest) {
  const { message } = await req.json();

  if (!message || typeof message !== "string") {
    return NextResponse.json(
      { error: "Message is required and must be a string." },
      { status: 400 }
    );
  }

  const input: ResponseInput = [
    {
      role: "user",
      content: message,
    },
  ];

  try {
    let response = await openai.responses.create({
      model: "gpt-5",
      tools,
      input,
    });
    console.log("res", response);

    response.output.forEach((item) => {
      if (item.type == "function_call") {
        if (item.name == "get_daily_transactions") {
          // Logging what they send as arguments
          console.log(JSON.parse(item.arguments));

          // Testing first with current date
          const dailyTransactions = toolFns.getDailyTransactions(new Date());

          input.push({
            type: "function_call_output",
            call_id: item.call_id,
            output: JSON.stringify(dailyTransactions),
          });
        }
      }
    });

    response = await openai.responses.create({
      model: "gpt-5",
      instructions: "Respond only with a transactions generated by a tool.",
      tools,
      input,
    });

    console.log("Final output:");
    console.log(JSON.stringify(response.output, null, 2));

    return NextResponse.json({ received: message });
  } catch (error) {
    console.error("Error processing message:", error);
    return NextResponse.json(
      { error: "Error processing message." },
      { status: 500 }
    );
  }
}
